/*
 * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.idea.frontend.api.components

import org.jetbrains.kotlin.descriptors.Deprecation
import org.jetbrains.kotlin.descriptors.annotations.AnnotationUseSiteTarget
import org.jetbrains.kotlin.idea.frontend.api.symbols.KtPropertySymbol
import org.jetbrains.kotlin.idea.frontend.api.symbols.KtSymbol
import org.jetbrains.kotlin.idea.frontend.api.symbols.markers.KtAnnotatedSymbol
import org.jetbrains.kotlin.idea.frontend.api.symbols.markers.KtSimpleConstantValue
import org.jetbrains.kotlin.name.Name

public abstract class KtSymbolInfoProvider : KtAnalysisSessionComponent() {
    public abstract fun getDeprecation(symbol: KtSymbol): Deprecation?
    public abstract fun getDeprecation(symbol: KtSymbol, annotationUseSiteTarget: AnnotationUseSiteTarget?): Deprecation?
    public abstract fun getGetterDeprecation(symbol: KtPropertySymbol): Deprecation?
    public abstract fun getSetterDeprecation(symbol: KtPropertySymbol): Deprecation?

    public abstract fun getJavaGetterName(symbol: KtPropertySymbol): Name
    public abstract fun getJavaSetterName(symbol: KtPropertySymbol): Name?
}

public interface KtSymbolInfoProviderMixIn : KtAnalysisSessionMixIn {
    /**
     * Gets the deprecation status of the given symbol. Returns null if the symbol it not deprecated.
     */
    public val KtSymbol.deprecationStatus: Deprecation? get() = analysisSession.symbolInfoProvider.getDeprecation(this)

    /**
     * Gets the deprecation status of the given symbol. Returns null if the symbol it not deprecated.
     */
    public fun KtSymbol.getDeprecationStatus(annotationUseSiteTarget: AnnotationUseSiteTarget?): Deprecation? =
        analysisSession.symbolInfoProvider.getDeprecation(this)

    /**
     * Gets the deprecation status of the getter of this property symbol. Returns null if the getter it not deprecated.
     */
    public val KtPropertySymbol.getterDeprecationStatus: Deprecation?
        get() = analysisSession.symbolInfoProvider.getGetterDeprecation(this)

    /**
     * Gets the deprecation status of the setter of this property symbol. Returns null if the setter it not deprecated or the property does
     * not have a setter.
     */
    public val KtPropertySymbol.setterDeprecationStatus: Deprecation?
        get() = analysisSession.symbolInfoProvider.getSetterDeprecation(this)

    public val KtPropertySymbol.javaGetterName: Name get() = analysisSession.symbolInfoProvider.getJavaGetterName(this)
    public val KtPropertySymbol.javaSetterName: Name? get() = analysisSession.symbolInfoProvider.getJavaSetterName(this)

    /**
     * Get symbol name which will be generated by the JVM Kotlin compiler which is defined by [kotlin.jvm.JvmName] annotation.
     */
    public fun KtAnnotatedSymbol.getJvmNameByAnnotation(annotationUseSiteTarget: AnnotationUseSiteTarget? = null): String? {
        val annotation = annotations.firstOrNull {
            val siteTarget = it.useSiteTarget
            (siteTarget == null || siteTarget == annotationUseSiteTarget) &&
                    it.classId?.asString() == "kotlin/jvm/JvmName"
        }

        return annotation?.let {
            (it.arguments.firstOrNull()?.expression as? KtSimpleConstantValue<*>)?.value as? String
        }
    }
}